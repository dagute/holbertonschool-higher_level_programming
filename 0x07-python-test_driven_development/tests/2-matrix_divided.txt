The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
---------------------

First import ``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it:

>>> matrix = [[1, 2, 3], [4, 5, 6]]

# input of standard matrix and div = integer
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# input of standard matrix and div = float
>>> print(matrix_divided(matrix, 1.5))
[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]

# print the matrix
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]


# check for string value in element
>>> matrix_divided([['1', 2, 3], [4, 5, 6]], 4)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# check for different row sizes
>>> matrix_divided([[1, 2, 3, 4], [2, 4, 4]], 4)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# check for non int, float values for div
>>> matrix_divided(matrix, '4')
Traceback (most recent call last):
TypeError: div must be a number

# check for 0 div value
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([[6, "12"], [18, 6]], 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
